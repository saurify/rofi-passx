#!/usr/bin/env bash
set -euo pipefail

# ============================================================================
#  SECTION 0: UTILITY SOURCING
#  – source utility functions
# ============================================================================

# Determine script directory for sourcing utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source utilities (try both development and installed paths)
if [[ -f "$SCRIPT_DIR/utils/notify.sh" ]]; then
    # Development mode
    source "$SCRIPT_DIR/utils/notify.sh"
    source "$SCRIPT_DIR/utils/config.sh"
    source "$SCRIPT_DIR/utils/pass.sh"
    source "$SCRIPT_DIR/utils/clipboard.sh"
    source "$SCRIPT_DIR/utils/gpg.sh"
    source "$SCRIPT_DIR/utils/startup.sh"
    source "$SCRIPT_DIR/menu/confirm.sh"
elif [[ -f "/usr/lib/rofi-passx/utils/notify.sh" ]]; then
    # Installed mode
    source "/usr/lib/rofi-passx/utils/notify.sh"
    source "/usr/lib/rofi-passx/utils/config.sh"
    source "/usr/lib/rofi-passx/utils/pass.sh"
    source "/usr/lib/rofi-passx/utils/clipboard.sh"
    source "/usr/lib/rofi-passx/utils/gpg.sh"
    source "/usr/lib/rofi-passx/utils/startup.sh"
    source "/usr/lib/rofi-passx/menu/confirm.sh"
else
    echo "Error: Could not find utility files" >&2
    exit 1
fi

# ============================================================================
#  SECTION 1: CONFIGURATION
#  – load defaults
#  – source $CONFIG_FILE
#  – apply overrides
# ============================================================================
IMPORT_FOLDER_DEFAULT="$HOME/Downloads"

CLOSE_ON_EDIT_DEFAULT=0
CLOSE_ON_COPY_DEFAULT=0
CLOSE_ON_DELETE_DEFAULT=0
CLOSE_ON_NEW_DEFAULT=0

grep_case_sensitive_DEFAULT=0
ENABLE_ALT_C_DEFAULT=1
ENABLE_ALT_D_DEFAULT=1
ENABLE_ALT_E_DEFAULT=1
ENABLE_GPG_KEY_SETTINGS_DEFAULT=1
HIDE_PASSWORD_DEFAULT=1    # 1 = mask password prompt

CONFIG_FILE="$HOME/.config/rofi-passx/config.sh"

# shellcheck disable=SC1090
[[ -f $CONFIG_FILE ]] && source "$CONFIG_FILE"

# now assign each final var (override default if user set in $CONFIG_FILE)
IMPORT_FOLDER="${IMPORT_FOLDER:-$IMPORT_FOLDER_DEFAULT}"

CLOSE_ON_EDIT="${CLOSE_ON_EDIT:-$CLOSE_ON_EDIT_DEFAULT}"
CLOSE_ON_COPY="${CLOSE_ON_COPY:-$CLOSE_ON_COPY_DEFAULT}"
CLOSE_ON_DELETE="${CLOSE_ON_DELETE:-$CLOSE_ON_DELETE_DEFAULT}"
CLOSE_ON_NEW="${CLOSE_ON_NEW:-$CLOSE_ON_NEW_DEFAULT}"

grep_case_sensitive="${grep_case_sensitive:-$grep_case_sensitive_DEFAULT}"
ENABLE_ALT_C="${ENABLE_ALT_C:-$ENABLE_ALT_C_DEFAULT}"
ENABLE_ALT_D="${ENABLE_ALT_D:-$ENABLE_ALT_D_DEFAULT}"
ENABLE_ALT_E="${ENABLE_ALT_E:-$ENABLE_ALT_E_DEFAULT}"
ENABLE_GPG_KEY_SETTINGS="${ENABLE_GPG_KEY_SETTINGS:-$ENABLE_GPG_KEY_SETTINGS_DEFAULT}"
HIDE_PASSWORD="${HIDE_PASSWORD:-$HIDE_PASSWORD_DEFAULT}"

# helper for password prompt flag
if [[ "$HIDE_PASSWORD" -eq 1 ]]; then
    PASS_PROMPT_FLAG=(-password)
else
    PASS_PROMPT_FLAG=()
fi


# ============================================================================
#  SECTION 2: UI  (rofi/dmenu + notifications)
#  – send_notify()
#  – rofi_menu()
# ============================================================================
send_notify() {
    local msg="$1"; msg="${msg//$'\\n'/$'\n'}"
    if   command -v notify-send >/dev/null; then notify-send "rofi-passx" "$msg"
    elif command -v zenity >/dev/null;    then zenity --info --text="$msg"
    elif command -v kdialog >/dev/null;   then kdialog --msgbox "$msg"
    else  echo "== rofi-passx: $msg ==" >&2
    fi
}

# parameters:
#   $1 = prompt (-p)
#   $2 = mesg (-mesg)
#   $3.. = menu items
rofi_menu() {
    local prompt="$1" mesg="$2"; shift 2
    printf "%s\n" "$@" \
      | rofi -dmenu -markup-rows -mesg "$mesg" -p "$prompt"
}


# ============================================================================
#  SECTION 3: CLIPBOARD HELPERS
#  – copy_to_clipboard()
#  – copy_username_to_clipboard()
# ============================================================================
detect_clip() {
    if command -v xclip >/dev/null; then echo xclip
    elif command -v wl-copy >/dev/null; then echo wl-copy
    else                                    echo ""
    fi
}

copy_to_clipboard() {
    local text="$1" label="$2" tool
    tool=$(detect_clip) || true
    if [[ -z "$tool" ]]; then
        send_notify "❌ No clipboard tool (xclip/wl-copy)!"
        return 1
    fi
    printf "%s" "$text" | $tool -selection clipboard
    send_notify "🔒 $label copied to clipboard."
}

copy_username_to_clipboard() {
    local site="$1" user="$2" raw username tool
    raw=$(pass show "web/$site/$user") || return 1
    username=$(
      printf "%b" "$raw" \
        | sed -nEn 's/^[[:space:]]*username:[[:space:]]*//Ip' \
        | head -n1
    )
    if [[ -z "$username" ]]; then
        send_notify "❌ No username for $user@$site."
        return 1
    fi
    copy_to_clipboard "$username" "Username for $user@$site"
}


# ============================================================================
#  SECTION 4: PASS-STORE HELPERS
#  – sanitize()
#  – get_sites()
#  – get_users_for_site()
#  – is_pass_initialized()
#  – check_dependencies()
# ============================================================================
sanitize() {
    # allow more URL-safe chars if you like
    echo "$1" | sed 's/[^a-zA-Z0-9_.@-]//g'
}

get_sites() {
    find ~/.password-store/web -type f -name '*.gpg' 2>/dev/null \
      | sed 's|.gpg$||;s|.*/web/||' \
      | cut -d/ -f1 \
      | sort -u \
      | xargs -I{} printf "%s%s\n" {}
}

get_users_for_site() {
    local site=${1// /}
    find ~/.password-store/web/"$site" -type f -name '*.gpg' 2>/dev/null \
      | sed 's|.gpg$||;s|.*/'"$site"'/||' \
      | sort -u
}

is_pass_initialized() {
    pass git status &>/dev/null
}

check_dependencies() {
    local miss=() tool
    for cmd in rofi pass bash; do
      ! command -v "$cmd" &>/dev/null && miss+=("$cmd")
    done
    tool=$(detect_clip)
    [[ -z "$tool" ]] && miss+=("xclip or wl-copy")
    (( ${#miss[@]} )) && {
      echo "[rofi-passx] Missing: ${miss[*]}" >&2
      exit 1
    }
}

check_dependencies


# ============================================================================
#  SECTION 5: GPG HELPERS
#  – gpg_key_settings_menu()
#  – (onboarding logic skipped for now)
# ============================================================================
gpg_key_settings_menu() {
    # stub: we'll revisit onboarding & key-edit later.
    send_notify "🔑 GPG settings (skipped for this refactor)."
}


# ============================================================================
#  SECTION 6: MENUS & ACTIONS
#  – main_menu
#  – import_menu
#  – user_menu
#  – manual_entry
#  – edit_entry
#  – open_settings_menu
# ============================================================================
main_menu() {
    local sites items sel
    sites=$(get_sites)
    items=()
    while read -r s; do [[ -n "$s" ]] && items+=("$s"); done <<<"$sites"
    items+=("➕ Add Entry Manually")
    items+=("📥 Import Passwords from File")
    [[ "$ENABLE_GPG_KEY_SETTINGS" -eq 1 ]] && items+=("🔑 GPG Key Settings")
    items+=("⚙️ Settings")
    is_pass_initialized || items+=("Onboard")
    items+=("↩ Back")

    local mesg="…(copy the exact same Pango instructions here)…"
    rofi_menu "rofi-passx: Select site or action" "$mesg" "${items[@]}"
}

import_menu() {
    local files=("↩ Back") f
    for f in "$IMPORT_FOLDER"/*.csv; do [[ -f $f ]] && files+=("$f"); done
    local mesg="…(copy exact CSV-import instructions)…"
    rofi_menu "rofi-passx: 📥 Import CSV" "$mesg" "${files[@]}"
}

user_menu() {
    local site="$1" users sel mesg
    users=$(get_users_for_site "$site")
    mesg="…(copy exact user-menu instructions, including Alt-key tips)…"
    local args=(-dmenu -markup-rows -mesg "$mesg" -p "Users for $site")
    $ENABLE_ALT_C && args+=(-kb-custom-1 alt+c)
    $ENABLE_ALT_D && args+=(-kb-custom-2 alt+d)
    $ENABLE_ALT_E && args+=(-kb-custom-3 alt+e)

    sel=$(printf "%s\n↩ Back\n$users\n✏️ Edit Entry\n🗑️ Delete this site\n" \
           | rofi "${args[@]}")
    echo "$sel"
}

manual_entry() { … }   # COPY EXACT from original
edit_entry()   { … }   # COPY EXACT from original
open_settings_menu() { … }

# ============================================================================
#  SECTION 7: MAIN LOOP
# ============================================================================
while true; do
  sel=$(main_menu)
  case "$sel" in
    "$ICON_WEB "*)
      site=${sel#"$ICON_WEB"}; site=${site// /}
      while true; do
        user_sel=$(user_menu "$site")
        [[ "$user_sel" == "$ICON_BACK Back" || -z $user_sel ]] && break
        case "$user_sel" in
          ✏️\ Edit\ Entry)   edit_entry "$site" … ;;
          🗑️\ Delete\ this\ site) … ;;
          *)                  passout="${user_sel#👤 }"
                              raw=$(pass show "web/$site/$passout")
                              pw=$(printf "%b" "$raw"| head -n1)
                              copy_to_clipboard "$pw" "Password for $passout@$site";;
        esac
      done
      ;;
    "➕ Add Entry Manually") manual_entry ;;
    "$ICON_IMPORT "*)
      f=$(import_menu); f=${f#$ICON_FILE}; [[ $f == Back ]] && continue
      /usr/bin/rofi-passx-import "$IMPORT_FOLDER/$f" \
        && send_notify "✅ Import successful!" \
        || send_notify "❌ Import failed!"
      ;;
    "🔑 GPG Key Settings")    gpg_key_settings_menu ;;
    "⚙️ Settings")            open_settings_menu; source "$CONFIG_FILE" ;;
    "Onboard")                send_notify "Onboard skipped" ;;
    "$ICON_BACK Back")        rofi -show drun & disown; exit 0 ;;
    *)                        send_notify "❓ Unknown: $sel" ;;
  esac
done
