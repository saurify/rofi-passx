#!/bin/bash
set -euo pipefail

# === User Configurable Settings ===
ICON_WEB="🌐"
ICON_IMPORT="📥"
ICON_FILE="📄 "
ICON_USER="👤 "
ICON_BACK="↩ "
IMPORT_FOLDER="$HOME/Downloads"

# === Config file support ===
CONFIG_FILE="$HOME/.config/rofi-passx/config.sh"
ICON_WEB_DEFAULT="🌐"
ICON_IMPORT_DEFAULT="📥"
ICON_FILE_DEFAULT="📄 "
ICON_USER_DEFAULT="👤 "
ICON_BACK_DEFAULT="↩ "
IMPORT_FOLDER_DEFAULT="$HOME/Downloads"
CLOSE_ON_EDIT_DEFAULT="0"
CLOSE_ON_COPY_DEFAULT="0"
CLOSE_ON_DELETE_DEFAULT="0"
CLOSE_ON_NEW_DEFAULT="0"
grep_case_sensitive_DEFAULT="0"
ENABLE_ALT_C_DEFAULT="1"
ENABLE_ALT_D_DEFAULT="1"
ENABLE_ALT_E_DEFAULT="1"
ENABLE_GPG_KEY_SETTINGS_DEFAULT="1"
# 1 = mask password input; 0 = show in plain text
HIDE_PASSWORD_DEFAULT="1"

if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
fi

ICON_WEB="${ICON_WEB:-$ICON_WEB_DEFAULT}"
ICON_IMPORT="${ICON_IMPORT:-$ICON_IMPORT_DEFAULT}"
ICON_FILE="${ICON_FILE:-$ICON_FILE_DEFAULT}"
ICON_USER="${ICON_USER:-$ICON_USER_DEFAULT}"
ICON_BACK="${ICON_BACK:-$ICON_BACK_DEFAULT}"
IMPORT_FOLDER="${IMPORT_FOLDER:-$IMPORT_FOLDER_DEFAULT}"
CLOSE_ON_EDIT="${CLOSE_ON_EDIT:-$CLOSE_ON_EDIT_DEFAULT}"
CLOSE_ON_COPY="${CLOSE_ON_COPY:-$CLOSE_ON_COPY_DEFAULT}"
CLOSE_ON_DELETE="${CLOSE_ON_DELETE:-$CLOSE_ON_DELETE_DEFAULT}"
CLOSE_ON_NEW="${CLOSE_ON_NEW:-$CLOSE_ON_NEW_DEFAULT}"
grep_case_sensitive="${grep_case_sensitive:-$grep_case_sensitive_DEFAULT}"
ENABLE_ALT_C="${ENABLE_ALT_C:-$ENABLE_ALT_C_DEFAULT}"
ENABLE_ALT_D="${ENABLE_ALT_D:-$ENABLE_ALT_D_DEFAULT}"
ENABLE_ALT_E="${ENABLE_ALT_E:-$ENABLE_ALT_E_DEFAULT}"
ENABLE_GPG_KEY_SETTINGS="${ENABLE_GPG_KEY_SETTINGS:-$ENABLE_GPG_KEY_SETTINGS_DEFAULT}"
# load our new setting
HIDE_PASSWORD="${HIDE_PASSWORD:-$HIDE_PASSWORD_DEFAULT}"

# build an array we can splice into any rofi call:
if [[ "$HIDE_PASSWORD" == "1" ]]; then
    PASS_PROMPT_FLAG=(-password)
else
    PASS_PROMPT_FLAG=()
fi

# === Fallback Notification ===
send_notify() {
    local message="$1"
    message="${message//$'\\n'/$'\n'}"
    if command -v notify-send >/dev/null 2>&1; then
        notify-send "rofi-passx" "$message"
    elif command -v zenity >/dev/null 2>&1; then
        zenity --info --text="$message"
    elif command -v kdialog >/dev/null 2>&1; then
        kdialog --msgbox "$message"
    else
        echo "== rofi-passx: $message =="
    fi
}

# === Editor Handler (Universal) ===
open_settings() {
    mkdir -p "$(dirname "$CONFIG_FILE")"
    if [[ ! -f "$CONFIG_FILE" ]]; then
        cat > "$CONFIG_FILE" <<EOF
# rofi-passx user config
ICON_WEB="$ICON_WEB"
ICON_IMPORT="$ICON_IMPORT"
ICON_FILE="$ICON_FILE"
ICON_USER="$ICON_USER"
ICON_BACK="$ICON_BACK"
IMPORT_FOLDER="$IMPORT_FOLDER"
CLOSE_ON_EDIT="$CLOSE_ON_EDIT"
CLOSE_ON_COPY="$CLOSE_ON_COPY"
CLOSE_ON_DELETE="$CLOSE_ON_DELETE"
CLOSE_ON_NEW="$CLOSE_ON_NEW"
grep_case_sensitive="$grep_case_sensitive"
ENABLE_ALT_C="$ENABLE_ALT_C"
ENABLE_ALT_D="$ENABLE_ALT_D"
ENABLE_ALT_E="$ENABLE_ALT_E"
ENABLE_GPG_KEY_SETTINGS="$ENABLE_GPG_KEY_SETTINGS"
EOF
    fi

    if [[ -n "${EDITOR:-}" && -x "$(command -v "$EDITOR" 2>/dev/null)" ]]; then
        "$EDITOR" "$CONFIG_FILE" && return
    fi

    if command -v xdg-open >/dev/null 2>&1; then
        xdg-open "$CONFIG_FILE" && return
    fi

    for editor in gnome-text-editor kate mousepad leafpad xed code gedit sublime_text nano vi; do
        if command -v "$editor" >/dev/null 2>&1; then
            "$editor" "$CONFIG_FILE" && return
        fi
    done

    send_notify "❌ Unable to open settings file. Please edit it manually: $CONFIG_FILE"
}

sanitize() {
    echo "$1" | sed 's/[^a-zA-Z0-9_.@-]//g'
}

show_menu() {
    local prompt="$1" msg="$2"
    shift 2
    printf "%s\n" "$@" | rofi -dmenu -markup-rows -mesg "$msg" -p "$prompt"
}

get_sites() {
    find ~/.password-store/web -type f -name '*.gpg' 2>/dev/null |
        sed 's|.gpg$||;s|.*/web/||' |
        awk -F/ '{print $1}' | sort -u |
        awk -v icon="$ICON_WEB " '{print icon $0}'
}

get_users_for_site() {
    local site="$(echo "$1" | xargs)"
    find ~/.password-store/web/"$site" -type f -name '*.gpg' 2>/dev/null |
        sed 's|.gpg$||;s|.*/web/'"$site"'/||' | sort -u
}

is_pass_initialized() {
    pass git status &>/dev/null
}

check_dependencies() {
    local missing=()
    for cmd in rofi xclip pass notify-send bash; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing+=("$cmd")
        fi
    done
    # Optionally check for wl-copy (Wayland clipboard)
    if ! command -v xclip >/dev/null 2>&1 && ! command -v wl-copy >/dev/null 2>&1; then
        missing+=("xclip or wl-copy")
    fi
    if (( ${#missing[@]} )); then
        echo "\n[rofi-passx] Missing dependencies: ${missing[*]}" >&2
        echo "Please install them using your package manager (e.g., pacman -S rofi xclip pass libnotify bash)." >&2
        exit 1
    fi
}

check_dependencies

# === Auto-onboard if nothing is set up ===
if ! gpg --list-secret-keys &>/dev/null || ! pass git status &>/dev/null; then
    WELCOME_MSG="<b><span size='x-large' foreground='#00B4D8'>👋 Welcome to rofi-passx!</span></b>\n\n"\
"<span size='large' foreground='#FFA500'>Let's set up your password vault for the first time.</span>\n"\
"You'll need a GPG key and to initialize pass.\n\n"\
"Follow the prompts to get started."
    rofi -e "$WELCOME_MSG" || echo "Welcome to rofi-passx! Let's set up your password vault."
    /usr/bin/rofi-passx-onboard || send_notify "Error running onboarding. Please try again."
fi

main_menu() {
    local SITES MENU_ITEMS
    SITES=$(get_sites)
    MENU_ITEMS=()
    while read -r line; do [[ -n "$line" ]] && MENU_ITEMS+=("$line"); done <<< "$SITES"
    MENU_ITEMS+=("➕ Add Entry Manually")
    MENU_ITEMS+=("$ICON_IMPORT Import Passwords from File")
    if [[ "$ENABLE_GPG_KEY_SETTINGS" == "1" ]]; then
        MENU_ITEMS+=("🔑 GPG Key Settings")
    fi
    MENU_ITEMS+=("⚙️ Settings")
    if ! is_pass_initialized; then
        MENU_ITEMS+=("Onboard")
    fi
    MENU_ITEMS+=("$ICON_BACK Back")

    local INSTRUCTIONS="<b><span size='large' foreground='#00B4D8'>📋 rofi-passx</span></b>

<b><span size='medium' foreground='#FFA500'>$ICON_WEB Select a site</span></b>  <span size='x-small'>Browse and copy credentials for a website</span>
<b><span size='medium' foreground='#FFA500'>➕ Add Entry Manually</span></b>  <span size='x-small'>Add a new credential manually</span>
<b><span size='medium' foreground='#FFA500'>$ICON_IMPORT Import Passwords</span></b>  <span size='x-small'>Bulk import from CSV file</span>
<b><span size='medium' foreground='#FFA500'>🔑 GPG Key Settings</span></b>  <span size='x-small'>Manage GPG keys for your vault</span>
<b><span size='medium' foreground='#FFA500'>⚙️ Settings</span></b>  <span size='x-small'>Edit icons and import folder</span>
<b><span size='medium' foreground='#FFA500'>$ICON_BACK Back</span></b>  <span size='x-small'>Return to application launcher</span>

<b><span size='x-small' foreground='#00B4D8'>CSV IMPORT FORMAT</span></b>
<span font_family='monospace' size='x-small' foreground='#FFA500'>┌───────────────────────────────┬──────────────────────┬───────────────┐
│ url                           │ username             │ password      │
├───────────────────────────────┼──────────────────────┼───────────────┤
│ https://github.com            │ someuser             │ supersecret   │
└───────────────────────────────┴──────────────────────┴───────────────┘</span>
<span size='x-small' foreground='#888888'><i>Tip: Only these three fields are required. Place your CSV file in <b>$IMPORT_FOLDER</b> for import.</i></span>
<span size='xx-small' foreground='#888888'><i>Use <b>ESC</b> or select <b>$ICON_BACK Back</b> to return at any time.</i></span>"
    show_menu "rofi-passx: Select site or action" "$INSTRUCTIONS" "${MENU_ITEMS[@]}"
}

import_menu() {
    local INSTRUCTIONS files=("$ICON_BACK Back")
    INSTRUCTIONS="<b><span size='large' foreground='#00B4D8'>📋 rofi-passx</span></b>

<b><span size='medium' foreground='#FFA500'>$ICON_IMPORT Import Passwords</span></b>  <span size='x-small'>Bulk import credentials from a CSV file in <b>$IMPORT_FOLDER</b></span>
<b><span size='medium' foreground='#FFA500'>$ICON_BACK Back</span></b>  <span size='x-small'>Return to main menu</span>

<b><span size='x-small' foreground='#00B4D8'>CSV IMPORT FORMAT</span></b>
<span font_family='monospace' size='x-small' foreground='#FFA500'>┌───────────────────────────────┬──────────────────────┬───────────────┐
│ url                           │ username             │ password      │
├───────────────────────────────┼──────────────────────┼───────────────┤
│ https://github.com            │ someuser             │ supersecret   │
└───────────────────────────────┴──────────────────────┴───────────────┘</span>
<span size='x-small' foreground='#888888'><i>Tip: Only these three fields are required. Place your CSV file in <b>$IMPORT_FOLDER</b> for import.</i></span>
<span size='xx-small' foreground='#888888'><i>Use <b>ESC</b> or select <b>$ICON_BACK Back</b> to return at any time.</i></span>"
    for f in "$IMPORT_FOLDER"/*.csv; do
        [[ -f "$f" ]] && files+=("$ICON_FILE$(basename "$f")")
    done
    show_menu "rofi-passx: $ICON_IMPORT Import CSV" "$INSTRUCTIONS" "${files[@]}"
}

user_menu() {
    local site="$1"
    local USERS INSTRUCTIONS
    USERS=$(get_users_for_site "$site")
    INSTRUCTIONS="<b><span size='large' foreground='#00B4D8'>📋 rofi-passx</span></b>
<span size='medium' foreground='#FFA500'>🔗 <b>Current Site:</b> <span font_family='monospace' foreground='#00B4D8'>$site</span></span>
<b><span size='medium' foreground='#FFA500'>👤 Select a username</span></b>  <span size='x-small'>Press <b>Enter</b> to copy password to clipboard</span>
<b><span size='medium' foreground='#FFA500'>$ICON_BACK Back</span></b>  <span size='x-small'>Return to site list</span>
"
    INSTRUCTIONS+="<span size='x-small' foreground='#888888'><i>Tip:"
    if [[ "$ENABLE_ALT_C" == "1" ]]; then INSTRUCTIONS+=" <b>Alt+C</b> to copy username for a specific user.
    "; fi
    if [[ "$ENABLE_ALT_D" == "1" ]]; then INSTRUCTIONS+=" <b>Alt+D</b> to delete entry.
    "; fi
    if [[ "$ENABLE_ALT_E" == "1" ]]; then INSTRUCTIONS+=" <b>Alt+E</b> to edit entry.
    "; fi
    INSTRUCTIONS+="
</i></span><span size='xx-small' foreground='#888888'><i>Use <b>ESC</b> or select <b>$ICON_BACK Back</b> to return at any time.</i></span>
    "
    local user_choices=("$ICON_BACK Back")
    while read -r line; do [[ -n "$line" ]] && user_choices+=("$ICON_USER $line"); done <<< "$USERS"
    user_choices+=("✏️ Edit Entry")
    user_choices+=("🗑️ Delete this site")
    local selection
    local rofi_args=("-dmenu" "-markup-rows" "-mesg" "$INSTRUCTIONS" "-p" "Users for $site")
    if [[ "$ENABLE_ALT_C" == "1" ]]; then rofi_args+=("-kb-custom-1" "alt+c"); fi
    if [[ "$ENABLE_ALT_D" == "1" ]]; then rofi_args+=("-kb-custom-2" "alt+d"); fi
    if [[ "$ENABLE_ALT_E" == "1" ]]; then rofi_args+=("-kb-custom-3" "alt+e"); fi
    selection=$(printf "%s\n" "${user_choices[@]}" | rofi "${rofi_args[@]}")

    # Alt+C pressed → copy *username* of the current selection
    if [[ "$ENABLE_ALT_C" == "1" && $? -eq 10 ]]; then
        copy_username_to_clipboard "$site" "$selection"
        return
    fi

    # Enter pressed → copy *password* of the current selection
    if [[ -n "$selection" && "$selection" != "$ICON_BACK Back" ]]; then
        copy_to_clipboard "$site" "$selection"
        return
    fi

    # "Back" or other commands just bubble up
    echo "$selection"
}

copy_to_clipboard() {
    local site="$1"
    local user="$2"
    # strip any leading icon/whitespace
    user="${user#👤 }"
    user="$(echo "$user" | xargs)"

    # fetch raw entry (may contain literal "\n")
    local raw
    raw=$(pass show "web/$(sanitize "$site")/$(sanitize "$user")") || {
        send_notify "❌ Failed to show entry for $user@$site."
        return 1
    }

    # expand \n into newlines, take first line, then clean it:
    #  - remove any ",javascript:..." and everything after
    #  - strip trailing commas
    local pass_entry
    pass_entry=$(
        printf "%b" "$raw" \
        | head -n1 \
        | sed -E '
            s/,*javascript:.*$//I
            ; s/,+$//
        '
    )

    if [[ -z "$pass_entry" ]]; then
        send_notify "❌ No password found for $user@$site."
        return 1
    fi

    # copy to clipboard
    if command -v xclip >/dev/null 2>&1; then
        printf "%s" "$pass_entry" | xclip -selection clipboard
    elif command -v wl-copy >/dev/null 2>&1; then
        printf "%s" "$pass_entry" | wl-copy
    else
        send_notify "❌ No clipboard tool (xclip/wl-copy) found!"
        return 1
    fi

    send_notify "🔒 Password for $user@$site copied to clipboard."

    if [[ "$CLOSE_ON_COPY" == "1" ]]; then
        rofi -e "Password copied. Closing." && exit 0
    fi

    return 0
}

copy_username_to_clipboard() {
    local site="$1"
    local user="$2"
    # strip any leading icon/whitespace
    user="${user#👤 }"
    user="$(echo "$user" | xargs)"
    # fetch raw entry (may contain literal "\n")
    local raw
    raw=$(pass show "web/$(sanitize "$site")/$(sanitize "$user")") || {
        send_notify "❌ Failed to show entry for $user@$site."
        return 1
    }
    # expand \n into actual newlines, strip CRs, extract first username: line
    local username
    username=$(
        printf "%b" "$raw" \
        | sed -E 's/\r//g' \
        | sed -nEn 's/^[[:space:]]*username:[[:space:]]*//Ip' \
        | head -n1
    )

    if [[ -z "$username" ]]; then
        send_notify "❌ No username found for $user@$site."
        return 1
    fi

    # copy to clipboard
    if command -v xclip >/dev/null 2>&1; then
        printf "%s" "$username" | xclip -selection clipboard
    elif command -v wl-copy >/dev/null 2>&1; then
        printf "%s" "$username" | wl-copy
    else
        send_notify "❌ No clipboard tool (xclip/wl-copy) found!"
        return 1
    fi

    send_notify "👤 Username for $user@$site copied to clipboard."

    if [[ "$CLOSE_ON_COPY" == "1" ]]; then
        rofi -e "Username copied. Closing." && exit 0
    fi

    return 0
}


edit_entry() {
    local site="$1" user="$2"
    local entry_path="web/$site/$user"
    local current_pass current_user current_site new_site new_user new_pass confirm
    current_pass=$(pass show "$entry_path" | head -n1)
    current_user=$(pass show "$entry_path" | grep '^username:' | cut -d' ' -f2-)
    current_site=$(pass show "$entry_path" | grep '^url:' | cut -d' ' -f2-)
    while true; do
        new_site=$(echo "$current_site" | rofi -dmenu -p "Site (domain)" -mesg "<b><span size='large' foreground='#00B4D8'>Edit Entry for site: $site</span></b>
<span size='small' foreground='#FFA500'>Edit the website domain</span>")
        new_site="$(sanitize "$new_site")"
        [[ -z "$new_site" ]] && return 1
        new_user=$(echo "$current_user" | rofi -dmenu -p "Username" -mesg "<b><span size='large' foreground='#00B4D8'>Edit Entry for site: $site</span></b>
<span size='small' foreground='#FFA500'>Edit the username for $new_site</span>")
        new_user="$(sanitize "$new_user")"
        [[ -z "$new_user" ]] && return 1
        new_pass=$(echo "$current_pass" | rofi -dmenu \
            "${PASS_PROMPT_FLAG[@]}" \
            -p "Password" \
            -mesg "<b><span size='large' foreground='#00B4D8'>Edit Entry for site: $site</span></b>
<span size='small' foreground='#FFA500'>Edit the password for $new_user@$new_site</span>")
        [[ -z "$new_pass" ]] && return 1
        confirm=$(echo -e "Save\nEdit" | rofi -dmenu -p "Save changes?" -mesg "<b>Site:</b> $new_site
<b>Username:</b> $new_user")
        if [[ "$confirm" == "Save" ]]; then
            break
        fi
    done
    # Remove old entry if site or user changed
    if [[ "$site" != "$new_site" || "$user" != "$new_user" ]]; then
        pass rm -f "web/$site/$user"
    fi
    local insert_output
    insert_output=$(echo -e "$new_pass\nusername: $new_user\nurl: $new_site" | pass insert -m -f "web/$new_site/$new_user" 2>&1)
    if [[ $? -eq 0 ]]; then
        send_notify "✏️ Entry for $new_user@$new_site updated."
        if [[ "$CLOSE_ON_EDIT" == "1" ]]; then
            rofi -e "Edit complete. Closing." && exit 0
        fi
        return 0
    else
        send_notify "❌ Failed to update entry for $new_user@$new_site.\n$insert_output"
        return 1
    fi
}

manual_entry() {
    local site user pass confirm
    # Multi-line Pango banner
    local BANNER="<b><span size='medium' foreground='#00B4D8'>➕ Add Entry Manually</span></b>
<span size='small' foreground='#FFA500'>Enter a new credential for your password vault.</span>
<span size='small' foreground='#888888'><i>Fill in Site, Username, Password. Press ESC to cancel.</i></span>"

    while true; do
        # 1) Site prompt with banner
        site=$(printf "" \
            | rofi -dmenu -markup-rows \
                   -mesg "$BANNER" \
                   -p "Site (domain)")
        site=$(sanitize "$site")
        [[ -z "$site" ]] && return

        # 2) Username prompt
        user=$(printf "" \
            | rofi -dmenu -markup-rows \
                   -mesg "$BANNER" \
                   -p "Username for $site")
        user=$(sanitize "$user")
        [[ -z "$user" ]] && return

        # 3) Password prompt
        pass=$(printf "" \
            | rofi -dmenu -markup-rows \
                   -mesg "$BANNER" \
                   "${PASS_PROMPT_FLAG[@]}" \
                   -p "Password for $user@$site")
        [[ -z "$pass" ]] && return

        # 4) Confirm or re-edit
        confirm=$(printf "Save\nEdit" \
            | rofi -dmenu -markup-rows \
                   -mesg "<b>Site:</b> $site\n<b>Username:</b> $user" \
                   -p "Save this entry?")
        [[ "$confirm" == "Save" ]] && break
        # else loop again
    done

    # Insert into pass
    if echo -e "$pass\nusername: $user\nurl: $site" \
            | pass insert -m -f "web/$site/$user" 2>&1; then
        send_notify "✅ Entry for $user@$site added."
        [[ "$CLOSE_ON_NEW" == "1" ]] && rofi -e "Entry added. Closing." && exit 0
    else
        send_notify "❌ Failed to add entry for $user@$site."
    fi
}


gpg_key_settings_menu() {
    while true; do
        local GPG_KEYS CURRENT_KEY_ID MENU_ITEMS INSTRUCTIONS selection
        set +e
        GPG_KEYS=$(gpg --list-secret-keys --with-colons 2>/dev/null | awk -F: '/^sec:/ {print $5"|"$10"|"$11}')
        if [[ $? -ne 0 ]]; then
            send_notify "❌ Failed to list GPG keys. Is GPG installed and initialized?"
            sleep 1
            continue
        fi
        set -e
        # Get current key from .gpg-id in password store
        CURRENT_KEY_ID=""
        if [[ -f "$HOME/.password-store/.gpg-id" ]]; then
            CURRENT_KEY_ID=$(head -n1 "$HOME/.password-store/.gpg-id" | xargs)
        fi
        MENU_ITEMS=()
        while IFS='|' read -r keyid uid _; do
            if [[ -n "$CURRENT_KEY_ID" && "$keyid" == "$CURRENT_KEY_ID" ]]; then
                MENU_ITEMS+=("<b><span foreground='#FFA500'>🔸 $uid ($keyid) [ACTIVE]</span></b>")
            else
                MENU_ITEMS+=("$uid ($keyid)")
            fi
        done <<< "$GPG_KEYS"
        MENU_ITEMS+=("➕ Create New GPG Key")
        MENU_ITEMS+=("✏️ Edit Existing GPG Key")
        MENU_ITEMS+=("$ICON_BACK Back")
        INSTRUCTIONS="<b><span size='large' foreground='#00B4D8'>🔑 GPG Key Settings</span></b>
<span size='medium' foreground='#FFA500'>Manage your GPG keys for password encryption.</span>
<span size='x-small' foreground='#888888'><i>Select a key to use for your vault, create a new one, or edit existing keys.</i></span>
<span size='xx-small' foreground='#888888'><i>Use <b>ESC</b> or select <b>$ICON_BACK Back</b> to return.</i></span>"
        selection=$(printf "%s\n" "${MENU_ITEMS[@]}" | rofi -dmenu -markup-rows -mesg "$INSTRUCTIONS" -p "GPG Key Settings")
        if [[ "$selection" == "$ICON_BACK Back" || -z "$selection" ]]; then
            break
        elif [[ "$selection" == "➕ Create New GPG Key" ]]; then
            onboard_gpg_key_creation || send_notify "GPG key creation cancelled or failed."
            # After key creation, refresh site list
            continue
        elif [[ "$selection" == "✏️ Edit Existing GPG Key" ]]; then
            edit_gpg_key_menu || send_notify "GPG key edit cancelled or failed."
            continue
        else
            # User selected a key to use for pass
            local selected_keyid
            selected_keyid=$(echo "$selection" | grep -oE '\([A-F0-9]+\)' | tr -d '()')
            if [[ -z "$selected_keyid" ]]; then
                send_notify "No key selected."
                continue
            fi
            if ! pass init "$selected_keyid"; then
                send_notify "❌ Failed to set GPG key $selected_keyid for password store."
            else
                send_notify "🔑 Password store now uses GPG key $selected_keyid."
            fi
            # After switching key, refresh site list by breaking to main menu
            break
        fi
    done
}

onboard_gpg_key_creation() {
    set +e
    local NAME EMAIL CONFIRM
    while true; do
        NAME=$(echo | rofi -dmenu -p "Enter your Name:" -mesg "<b><span size='medium' foreground='#00B4D8'>Your Name</span></b>
<span size='small' foreground='#FFA500'>This will be used for your GPG key. (Required)</span>")
        [[ -z "$NAME" ]] && send_notify "Name is required." && continue
        EMAIL=$(echo | rofi -dmenu -p "Enter your Email:" -mesg "<b><span size='medium' foreground='#00B4D8'>Your Email</span></b>
<span size='small' foreground='#FFA500'>This will be used for your GPG key. (Required)</span>")
        [[ -z "$EMAIL" ]] && send_notify "Email is required." && continue
        CONFIRM=$(echo -e "Continue\nEdit" | rofi -dmenu -p "Proceed with these details?" -mesg "<b>Name:</b> $NAME
<b>Email:</b> $EMAIL")
        if [[ "$CONFIRM" == "Continue" ]]; then
            break
        fi
    done
    local GPG_UID="$NAME <$EMAIL>"
    if gpg --list-secret-keys --with-colons "$GPG_UID" 2>/dev/null | grep -q '^sec:'; then
        send_notify "A GPG key for this identity already exists. Using existing key."
    else
        if ! gpg --batch --passphrase '' --quick-gen-key "$GPG_UID" default default never; then
            send_notify "❌ Failed to create GPG key."
            return 1
        fi
        send_notify "GPG key created for $EMAIL"
    fi
    local KEY_ID
    KEY_ID=$(gpg --list-secret-keys --with-colons "$GPG_UID" 2>/dev/null | awk -F: '/^sec:/ {print $5}' | head -n1)
    if [[ -n "$KEY_ID" ]]; then
        if ! pass init "$KEY_ID"; then
            send_notify "❌ Failed to set new GPG key for password store."
        else
            send_notify "🔑 Password store now uses GPG key $KEY_ID."
        fi
    fi
    set -e
    return 0
}

edit_gpg_key_menu() {
    set +e
    local GPG_KEYS MENU_ITEMS INSTRUCTIONS selection
    GPG_KEYS=$(gpg --list-secret-keys --with-colons 2>/dev/null | awk -F: '/^sec:/ {print $5"|"$10"|"$11}')
    if [[ $? -ne 0 ]]; then
        send_notify "❌ Failed to list GPG keys for editing."
        return 1
    fi
    MENU_ITEMS=()
    while IFS='|' read -r keyid uid _; do
        MENU_ITEMS+=("$uid ($keyid)")
    done <<< "$GPG_KEYS"
    MENU_ITEMS+=("$ICON_BACK Back")
    INSTRUCTIONS="<b><span size='large' foreground='#FFA500'>✏️ Edit GPG Key</span></b>
<span size='small' foreground='#FF0000'>⚠️ Warning: Editing GPG key names/emails is an advanced operation. Changing UIDs may affect your ability to decrypt old passwords if not handled carefully. Proceed only if you understand the risks.</span>
<span size='x-small' foreground='#888888'><i>Select a key to edit, or Back to return.</i></span>"
    selection=$(printf "%s\n" "${MENU_ITEMS[@]}" | rofi -dmenu -markup-rows -mesg "$INSTRUCTIONS" -p "Edit GPG Key")
    if [[ "$selection" == "$ICON_BACK Back" || -z "$selection" ]]; then
        return 0
    fi
    local keyid
    keyid=$(echo "$selection" | grep -oE '\([A-F0-9]+\)' | tr -d '()')
    if [[ -z "$keyid" ]]; then
        send_notify "No key selected."
        return 1
    fi
    local NEW_NAME NEW_EMAIL NEW_COMMENT CONFIRM
    NEW_NAME=$(echo | rofi -dmenu -p "New Name (leave blank to keep)" -mesg "<b><span size='medium' foreground='#00B4D8'>Edit Name</span></b>")
    NEW_EMAIL=$(echo | rofi -dmenu -p "New Email (leave blank to keep)" -mesg "<b><span size='medium' foreground='#00B4D8'>Edit Email</span></b>")
    NEW_COMMENT=$(echo | rofi -dmenu -p "New Comment (leave blank to keep)" -mesg "<b><span size='medium' foreground='#00B4D8'>Edit Comment</span></b>")
    CONFIRM=$(echo -e "Apply\nCancel" | rofi -dmenu -p "Apply changes?" -mesg "<b>Key:</b> $keyid\n<b>Name:</b> $NEW_NAME\n<b>Email:</b> $NEW_EMAIL\n<b>Comment:</b> $NEW_COMMENT")
    if [[ "$CONFIRM" != "Apply" ]]; then
        send_notify "Edit cancelled."
        return 0
    fi
    local UID_ARGS=""
    [[ -n "$NEW_NAME" ]] && UID_ARGS+="$NEW_NAME "
    [[ -n "$NEW_EMAIL" ]] && UID_ARGS+="<$NEW_EMAIL>"
    [[ -n "$NEW_COMMENT" ]] && UID_ARGS+=" ($NEW_COMMENT)"
    if [[ -n "$UID_ARGS" ]]; then
        if echo -e "adduid\n$UID_ARGS\nsave\n" | gpg --command-fd 0 --status-fd 1 --edit-key "$keyid"; then
            send_notify "UID added to key $keyid."
        else
            send_notify "❌ Failed to edit GPG key $keyid."
        fi
    else
        send_notify "No changes made."
    fi
    set -e
    return 0
}

open_settings_menu() {
    local MENU_ITEMS selection msg
    if [[ -f "$CONFIG_FILE" ]]; then
        MENU_ITEMS=("Open config file" "Regenerate config with defaults" "$ICON_BACK Back")
        msg="<b><span size='medium' foreground='#00B4D8'>rofi-passx Settings</span></b>
<span size='small' foreground='#FFA500'>Edit or reset your configuration file.</span>
<span size='x-small' foreground='#888888'><i>Current config: <b>$CONFIG_FILE</b></i></span>"
    else
        MENU_ITEMS=("Create config file" "$ICON_BACK Back")
        msg="<b><span size='medium' foreground='#00B4D8'>rofi-passx Settings</span></b>
<span size='small' foreground='#FFA500'>No config file found. You can create one with defaults.</span>
<span size='x-small' foreground='#888888'><i>Config path: <b>$CONFIG_FILE</b></i></span>"
    fi
    selection=$(printf "%s\n" "${MENU_ITEMS[@]}" | rofi -dmenu -markup-rows -mesg "$msg" -p "Settings")
    case "$selection" in
        "Open config file")
            if [[ -f "$CONFIG_FILE" ]]; then
                open_settings
            else
                rofi -e "No config file found to open. Use 'Create config file' to generate one."
            fi
            ;;
        "Regenerate config with defaults")
            if [[ -f "$CONFIG_FILE" ]]; then
                local bak="$CONFIG_FILE.bak.$(date +%s)"
                cp "$CONFIG_FILE" "$bak"
                cat > "$CONFIG_FILE" <<EOF
# rofi-passx user config (regenerated)
ICON_WEB="$ICON_WEB_DEFAULT"
ICON_IMPORT="$ICON_IMPORT_DEFAULT"
ICON_FILE="$ICON_FILE_DEFAULT"
ICON_USER="$ICON_USER_DEFAULT"
ICON_BACK="$ICON_BACK_DEFAULT"
IMPORT_FOLDER="$IMPORT_FOLDER_DEFAULT"
CLOSE_ON_EDIT="$CLOSE_ON_EDIT_DEFAULT"
CLOSE_ON_COPY="$CLOSE_ON_COPY_DEFAULT"
CLOSE_ON_DELETE="$CLOSE_ON_DELETE_DEFAULT"
CLOSE_ON_NEW="$CLOSE_ON_NEW_DEFAULT"
grep_case_sensitive="$grep_case_sensitive_DEFAULT"
ENABLE_ALT_C="$ENABLE_ALT_C_DEFAULT"
ENABLE_ALT_D="$ENABLE_ALT_D_DEFAULT"
ENABLE_ALT_E="$ENABLE_ALT_E_DEFAULT"
ENABLE_GPG_KEY_SETTINGS="$ENABLE_GPG_KEY_SETTINGS_DEFAULT"
HIDE_PASSWORD="$HIDE_PASSWORD_DEFAULT"
EOF
                rofi -e "Config regenerated with defaults. Backup saved as $bak."
            else
                rofi -e "No config file to regenerate. Use 'Create config file' to generate one."
            fi
            ;;
        "Create config file")
            if [[ -f "$CONFIG_FILE" ]]; then
                rofi -e "Config file already exists. Use 'Regenerate config with defaults' to reset."
            else
                mkdir -p "$(dirname "$CONFIG_FILE")"
                cat > "$CONFIG_FILE" <<EOF
# rofi-passx user config (created)
ICON_WEB="$ICON_WEB_DEFAULT"
ICON_IMPORT="$ICON_IMPORT_DEFAULT"
ICON_FILE="$ICON_FILE_DEFAULT"
ICON_USER="$ICON_USER_DEFAULT"
ICON_BACK="$ICON_BACK_DEFAULT"
IMPORT_FOLDER="$IMPORT_FOLDER_DEFAULT"
CLOSE_ON_EDIT="$CLOSE_ON_EDIT_DEFAULT"
CLOSE_ON_COPY="$CLOSE_ON_COPY_DEFAULT"
CLOSE_ON_DELETE="$CLOSE_ON_DELETE_DEFAULT"
CLOSE_ON_NEW="$CLOSE_ON_NEW_DEFAULT"
grep_case_sensitive="$grep_case_sensitive_DEFAULT"
ENABLE_ALT_C="$ENABLE_ALT_C_DEFAULT"
ENABLE_ALT_D="$ENABLE_ALT_D_DEFAULT"
ENABLE_ALT_E="$ENABLE_ALT_E_DEFAULT"
ENABLE_GPG_KEY_SETTINGS="$ENABLE_GPG_KEY_SETTINGS_DEFAULT"
HIDE_PASSWORD="$HIDE_PASSWORD_DEFAULT"
EOF
                rofi -e "Config file created with defaults. You can now open and edit it."
            fi
            ;;
        "$ICON_BACK Back")
            return
            ;;
        *)
            rofi -e "Unknown selection."
            ;;
    esac
}

# === Main Flow ===
while true; do
    MENU=$(main_menu)
    case "$MENU" in
        "$ICON_WEB "*)
            SITE="${MENU#"$ICON_WEB"}"
            SITE="$(echo "$SITE" | xargs)"
            while true; do
                USER=$(user_menu "$SITE")
                if [[ "$USER" == "$ICON_BACK Back" || -z "$USER" ]]; then
                    break
                elif [[ "$USER" == "🗑️ Delete this site" ]]; then
                    confirm=$(echo -e "Yes\nNo" | rofi -dmenu -p "Delete site $SITE and all its entries?" -mesg "<b><span size='medium' foreground='#FF0000'>Delete Site</span></b>")
                    if [[ "$confirm" == "Yes" ]]; then
                        rm -rf ~/.password-store/web/"$SITE"
                        send_notify "🗑️ Site $SITE deleted."
                        if [[ "$CLOSE_ON_DELETE" == "1" ]]; then
                            rofi -e "Site deleted. Closing." && exit 0
                        fi
                        break
                    fi
                    continue
                elif [[ "$USER" == "✏️ Edit Entry" ]]; then
                    users=$(get_users_for_site "$SITE")
                    user_to_edit=$(printf "%s\n" $users | rofi -dmenu -p "Edit which user?" -mesg "<b><span size='large' foreground='#00B4D8'>Edit User</span></b>")
                    [[ -z "$user_to_edit" ]] && continue
                    if edit_entry "$SITE" "$user_to_edit"; then
                        continue  # Refresh user list after edit
                    else
                        continue
                    fi
                elif [[ "$USER" == "__COPIED__" ]]; then
                    continue  # After copy, refresh user menu
                elif [[ "$USER" == "__DELETED__" ]]; then
                    continue  # After delete, refresh user menu
                fi
                # Default: copy password to clipboard
                copy_to_clipboard "$SITE" "$USER"
            done
            ;;
        "➕ Add Entry Manually")
            manual_entry
            continue  # After manual entry, show main menu again
            ;;
        "$ICON_IMPORT Import Passwords from File")
            FILE=$(import_menu)
            FILE="${FILE#$ICON_FILE}"
            FILE="${FILE#$ICON_BACK Back}"
            [[ -z "$FILE" || "$FILE" == "Back" ]] && continue
            FILE="$(echo "$FILE" | xargs)"
            FULL="$IMPORT_FOLDER/$FILE"
            if [[ -f "$FULL" ]]; then
                if /usr/bin/rofi-passx-import "$FULL"; then
                    send_notify "✅ Password import successful!"
                else
                    send_notify "❌ Password import failed!"
                fi
            else
                send_notify "❌ File not found: $FULL"
            fi
            ;;
        "🔑 GPG Key Settings")
            gpg_key_settings_menu
            ;;
        "⚙️ Settings")
            open_settings_menu
            source "$CONFIG_FILE"
            ICON_WEB="${ICON_WEB:-$ICON_WEB_DEFAULT}"
            ICON_IMPORT="${ICON_IMPORT:-$ICON_IMPORT_DEFAULT}"
            ICON_FILE="${ICON_FILE:-$ICON_FILE_DEFAULT}"
            ICON_USER="${ICON_USER:-$ICON_USER_DEFAULT}"
            ICON_BACK="${ICON_BACK:-$ICON_BACK_DEFAULT}"
            IMPORT_FOLDER="${IMPORT_FOLDER:-$IMPORT_FOLDER_DEFAULT}"
            ;;
        "Onboard")
            /usr/bin/rofi-passx-onboard || send_notify "Error running rofi-passx-onboard"
            ;;
        "$ICON_BACK Back")
            rofi -show drun & disown
            break
            ;;
        *)
            send_notify "❓ Unknown command: $MENU"
            ;;
    esac
done
