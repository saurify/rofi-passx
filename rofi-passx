#!/bin/bash
set -euo pipefail

# === User Configurable Settings ===
ICON_WEB="🌐"
ICON_IMPORT="📥"
ICON_FILE="📄 "
ICON_USER="👤 "
ICON_BACK="↩ "
IMPORT_FOLDER="$HOME/Downloads"

# === Config file support ===
CONFIG_FILE="$HOME/.config/rofi-passx/config.sh"
ICON_WEB_DEFAULT="🌐"
ICON_IMPORT_DEFAULT="📥"
ICON_FILE_DEFAULT="📄 "
ICON_USER_DEFAULT="👤 "
ICON_BACK_DEFAULT="↩ "
IMPORT_FOLDER_DEFAULT="$HOME/Downloads"
CLOSE_ON_EDIT_DEFAULT="0"
CLOSE_ON_COPY_DEFAULT="0"
CLOSE_ON_DELETE_DEFAULT="0"
CLOSE_ON_NEW_DEFAULT="0"
grep_case_sensitive_DEFAULT="0"
ENABLE_ALT_C_DEFAULT="1"
ENABLE_ALT_D_DEFAULT="1"
ENABLE_ALT_E_DEFAULT="1"

if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
fi

ICON_WEB="${ICON_WEB:-$ICON_WEB_DEFAULT}"
ICON_IMPORT="${ICON_IMPORT:-$ICON_IMPORT_DEFAULT}"
ICON_FILE="${ICON_FILE:-$ICON_FILE_DEFAULT}"
ICON_USER="${ICON_USER:-$ICON_USER_DEFAULT}"
ICON_BACK="${ICON_BACK:-$ICON_BACK_DEFAULT}"
IMPORT_FOLDER="${IMPORT_FOLDER:-$IMPORT_FOLDER_DEFAULT}"
CLOSE_ON_EDIT="${CLOSE_ON_EDIT:-$CLOSE_ON_EDIT_DEFAULT}"
CLOSE_ON_COPY="${CLOSE_ON_COPY:-$CLOSE_ON_COPY_DEFAULT}"
CLOSE_ON_DELETE="${CLOSE_ON_DELETE:-$CLOSE_ON_DELETE_DEFAULT}"
CLOSE_ON_NEW="${CLOSE_ON_NEW:-$CLOSE_ON_NEW_DEFAULT}"
grep_case_sensitive="${grep_case_sensitive:-$grep_case_sensitive_DEFAULT}"
ENABLE_ALT_C="${ENABLE_ALT_C:-$ENABLE_ALT_C_DEFAULT}"
ENABLE_ALT_D="${ENABLE_ALT_D:-$ENABLE_ALT_D_DEFAULT}"
ENABLE_ALT_E="${ENABLE_ALT_E:-$ENABLE_ALT_E_DEFAULT}"

# === Fallback Notification ===
send_notify() {
    local message="$1"
    message="${message//$'\\n'/$'\n'}"
    if command -v notify-send >/dev/null 2>&1; then
        notify-send "rofi-passx" "$message"
    elif command -v zenity >/dev/null 2>&1; then
        zenity --info --text="$message"
    elif command -v kdialog >/dev/null 2>&1; then
        kdialog --msgbox "$message"
    else
        echo "== rofi-passx: $message =="
    fi
}

# === Editor Handler (Universal) ===
open_settings() {
    mkdir -p "$(dirname "$CONFIG_FILE")"
    if [[ ! -f "$CONFIG_FILE" ]]; then
        cat > "$CONFIG_FILE" <<EOF
# rofi-passx user config
ICON_WEB="$ICON_WEB"
ICON_IMPORT="$ICON_IMPORT"
ICON_FILE="$ICON_FILE"
ICON_USER="$ICON_USER"
ICON_BACK="$ICON_BACK"
IMPORT_FOLDER="$IMPORT_FOLDER"
CLOSE_ON_EDIT="$CLOSE_ON_EDIT"
CLOSE_ON_COPY="$CLOSE_ON_COPY"
CLOSE_ON_DELETE="$CLOSE_ON_DELETE"
CLOSE_ON_NEW="$CLOSE_ON_NEW"
grep_case_sensitive="$grep_case_sensitive"
ENABLE_ALT_C="$ENABLE_ALT_C"
ENABLE_ALT_D="$ENABLE_ALT_D"
ENABLE_ALT_E="$ENABLE_ALT_E"
EOF
    fi

    if [[ -n "${EDITOR:-}" && -x "$(command -v "$EDITOR" 2>/dev/null)" ]]; then
        "$EDITOR" "$CONFIG_FILE" && return
    fi

    if command -v xdg-open >/dev/null 2>&1; then
        xdg-open "$CONFIG_FILE" && return
    fi

    for editor in gnome-text-editor kate mousepad leafpad xed code gedit sublime_text nano vi; do
        if command -v "$editor" >/dev/null 2>&1; then
            "$editor" "$CONFIG_FILE" && return
        fi
    done

    send_notify "❌ Unable to open settings file. Please edit it manually: $CONFIG_FILE"
}

sanitize() {
    echo "$1" | sed 's/[^a-zA-Z0-9_.@-]//g'
}

show_menu() {
    local prompt="$1" msg="$2"
    shift 2
    printf "%s\n" "$@" | rofi -dmenu -markup-rows -mesg "$msg" -p "$prompt"
}

get_sites() {
    find ~/.password-store/web -type f -name '*.gpg' 2>/dev/null |
        sed 's|.gpg$||;s|.*/web/||' |
        awk -F/ '{print $1}' | sort -u |
        awk -v icon="$ICON_WEB " '{print icon $0}'
}

get_users_for_site() {
    local site="$(echo "$1" | xargs)"
    find ~/.password-store/web/"$site" -type f -name '*.gpg' 2>/dev/null |
        sed 's|.gpg$||;s|.*/web/'"$site"'/||' | sort -u
}

is_pass_initialized() {
    pass git status &>/dev/null
}

check_dependencies() {
    local missing=()
    for cmd in rofi xclip pass notify-send bash; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing+=("$cmd")
        fi
    done
    # Optionally check for wl-copy (Wayland clipboard)
    if ! command -v xclip >/dev/null 2>&1 && ! command -v wl-copy >/dev/null 2>&1; then
        missing+=("xclip or wl-copy")
    fi
    if (( ${#missing[@]} )); then
        echo "\n[rofi-passx] Missing dependencies: ${missing[*]}" >&2
        echo "Please install them using your package manager (e.g., pacman -S rofi xclip pass libnotify bash)." >&2
        exit 1
    fi
}

check_dependencies

# === Auto-onboard if nothing is set up ===
if ! gpg --list-secret-keys &>/dev/null || ! pass git status &>/dev/null; then
    WELCOME_MSG="<b><span size='x-large' foreground='#00B4D8'>👋 Welcome to rofi-passx!</span></b>\n\n"\
"<span size='large' foreground='#FFA500'>Let's set up your password vault for the first time.</span>\n"\
"You'll need a GPG key and to initialize pass.\n\n"\
"Follow the prompts to get started."
    rofi -e "$WELCOME_MSG" || echo "Welcome to rofi-passx! Let's set up your password vault."
    /usr/bin/rofi-passx-onboard || send_notify "Error running onboarding. Please try again."
fi

main_menu() {
    local SITES MENU_ITEMS
    SITES=$(get_sites)
    MENU_ITEMS=()
    while read -r line; do [[ -n "$line" ]] && MENU_ITEMS+=("$line"); done <<< "$SITES"
    MENU_ITEMS+=("➕ Add Entry Manually")
    MENU_ITEMS+=("$ICON_IMPORT Import Passwords from File")
    MENU_ITEMS+=("⚙️ Settings")
    if ! is_pass_initialized; then
        MENU_ITEMS+=("Onboard")
    fi
    MENU_ITEMS+=("$ICON_BACK Back")

    local INSTRUCTIONS="<b><span size='large' foreground='#00B4D8'>📋 rofi-passx</span></b>

<b><span size='medium' foreground='#FFA500'>$ICON_WEB Select a site</span></b>  <span size='x-small'>Browse and copy credentials for a website</span>
<b><span size='medium' foreground='#FFA500'>➕ Add Entry Manually</span></b>  <span size='x-small'>Add a new credential manually</span>
<b><span size='medium' foreground='#FFA500'>$ICON_IMPORT Import Passwords</span></b>  <span size='x-small'>Bulk import from CSV file</span>
<b><span size='medium' foreground='#FFA500'>⚙️ Settings</span></b>  <span size='x-small'>Edit icons and import folder</span>
<b><span size='medium' foreground='#FFA500'>$ICON_BACK Back</span></b>  <span size='x-small'>Return to application launcher</span>

<b><span size='x-small' foreground='#00B4D8'>CSV IMPORT FORMAT</span></b>
<span font_family='monospace' size='x-small' foreground='#FFA500'>┌───────────────────────────────┬──────────────────────┬───────────────┐
│ url                           │ username             │ password      │
├───────────────────────────────┼──────────────────────┼───────────────┤
│ https://github.com            │ someuser             │ supersecret   │
└───────────────────────────────┴──────────────────────┴───────────────┘</span>
<span size='x-small' foreground='#888888'><i>Tip: Only these three fields are required. Place your CSV file in <b>$IMPORT_FOLDER</b> for import.</i></span>
<span size='xx-small' foreground='#888888'><i>Use <b>ESC</b> or select <b>$ICON_BACK Back</b> to return at any time.</i></span>"
    show_menu "rofi-passx: Select site or action" "$INSTRUCTIONS" "${MENU_ITEMS[@]}"
}

import_menu() {
    local INSTRUCTIONS files=("$ICON_BACK Back")
    INSTRUCTIONS="<b><span size='large' foreground='#00B4D8'>📋 rofi-passx</span></b>

<b><span size='medium' foreground='#FFA500'>$ICON_IMPORT Import Passwords</span></b>  <span size='x-small'>Bulk import credentials from a CSV file in <b>$IMPORT_FOLDER</b></span>
<b><span size='medium' foreground='#FFA500'>$ICON_BACK Back</span></b>  <span size='x-small'>Return to main menu</span>

<b><span size='x-small' foreground='#00B4D8'>CSV IMPORT FORMAT</span></b>
<span font_family='monospace' size='x-small' foreground='#FFA500'>┌───────────────────────────────┬──────────────────────┬───────────────┐
│ url                           │ username             │ password      │
├───────────────────────────────┼──────────────────────┼───────────────┤
│ https://github.com            │ someuser             │ supersecret   │
└───────────────────────────────┴──────────────────────┴───────────────┘</span>
<span size='x-small' foreground='#888888'><i>Tip: Only these three fields are required. Place your CSV file in <b>$IMPORT_FOLDER</b> for import.</i></span>
<span size='xx-small' foreground='#888888'><i>Use <b>ESC</b> or select <b>$ICON_BACK Back</b> to return at any time.</i></span>"
    for f in "$IMPORT_FOLDER"/*.csv; do
        [[ -f "$f" ]] && files+=("$ICON_FILE$(basename "$f")")
    done
    show_menu "rofi-passx: $ICON_IMPORT Import CSV" "$INSTRUCTIONS" "${files[@]}"
}

user_menu() {
    local site="$1"
    local USERS INSTRUCTIONS
    USERS=$(get_users_for_site "$site")
    INSTRUCTIONS="<b><span size='large' foreground='#00B4D8'>📋 rofi-passx</span></b>
<span size='medium' foreground='#FFA500'>🔗 <b>Current Site:</b> <span font_family='monospace' foreground='#00B4D8'>$site</span></span>
<b><span size='medium' foreground='#FFA500'>👤 Select a username</span></b>  <span size='x-small'>Press <b>Enter</b> to copy password to clipboard</span>
<b><span size='medium' foreground='#FFA500'>$ICON_BACK Back</span></b>  <span size='x-small'>Return to site list</span>
"
    INSTRUCTIONS+="<span size='x-small' foreground='#888888'><i>Tip:"
    if [[ "$ENABLE_ALT_C" == "1" ]]; then INSTRUCTIONS+=" <b>Alt+C</b> to copy password for a specific user.
    "; fi
    if [[ "$ENABLE_ALT_D" == "1" ]]; then INSTRUCTIONS+=" <b>Alt+D</b> to delete entry.
    "; fi
    if [[ "$ENABLE_ALT_E" == "1" ]]; then INSTRUCTIONS+=" <b>Alt+E</b> to edit entry.
    "; fi
    INSTRUCTIONS+="
</i></span><span size='xx-small' foreground='#888888'><i>Use <b>ESC</b> or select <b>$ICON_BACK Back</b> to return at any time.</i></span>
    "
    local user_choices=("$ICON_BACK Back")
    while read -r line; do [[ -n "$line" ]] && user_choices+=("$ICON_USER $line"); done <<< "$USERS"
    user_choices+=("✏️ Edit Entry")
    user_choices+=("🗑️ Delete this site")
    local selection
    local rofi_args=("-dmenu" "-markup-rows" "-mesg" "$INSTRUCTIONS" "-p" "Users for $site")
    if [[ "$ENABLE_ALT_C" == "1" ]]; then rofi_args+=("-kb-custom-1" "alt+c"); fi
    if [[ "$ENABLE_ALT_D" == "1" ]]; then rofi_args+=("-kb-custom-2" "alt+d"); fi
    if [[ "$ENABLE_ALT_E" == "1" ]]; then rofi_args+=("-kb-custom-3" "alt+e"); fi
    selection=$(printf "%s\n" "${user_choices[@]}" | rofi "${rofi_args[@]}")
    rofi_exit=$?
    if [[ "$ENABLE_ALT_C" == "1" && $rofi_exit -eq 10 ]]; then
        user_to_copy=$(printf "%s\n" $USERS | rofi -dmenu -p "Copy password for which user?" -mesg "<b><span size='medium' foreground='#00B4D8'>Copy Password</span></b>")
        [[ -z "$user_to_copy" ]] && return
        copy_to_clipboard "$site" "$user_to_copy"
        echo "__COPIED__"
        return
    elif [[ "$ENABLE_ALT_D" == "1" && $rofi_exit -eq 11 ]]; then
        user_to_delete=$(printf "%s\n" $USERS | rofi -dmenu -p "Delete which user?" -mesg "<b><span size='medium' foreground='#FF0000'>Delete User</span></b>")
        [[ -z "$user_to_delete" ]] && return
        confirm=$(echo -e "Yes\nNo" | rofi -dmenu -p "Delete $user_to_delete@$site?" -mesg "<b><span size='medium' foreground='#FF0000'>Confirm Delete</span></b>")
        if [[ "$confirm" == "Yes" ]]; then
            rm -f ~/.password-store/web/"$site"/"$user_to_delete".gpg
            send_notify "🗑️ User $user_to_delete@$site deleted."
            if [[ "$CLOSE_ON_DELETE" == "1" ]]; then
                rofi -e "User deleted. Closing." && exit 0
            fi
        fi
        echo "__DELETED__"
        return
    elif [[ "$ENABLE_ALT_E" == "1" && $rofi_exit -eq 12 ]]; then
        user_to_edit=$(printf "%s\n" $USERS | rofi -dmenu -p "Edit which user?" -mesg "<b><span size='medium' foreground='#00B4D8'>Edit User</span></b>")
        [[ -z "$user_to_edit" ]] && return
        edit_entry "$site" "$user_to_edit"
        echo "__EDITED__"
        return
    fi
    echo "$selection"
}

copy_to_clipboard() {
    local site="$1" user="$2"
    user="${user#👤 }"
    user="$(echo "$user" | xargs)"
    local pass_entry
    pass_entry=$(pass show "web/$(sanitize "$site")/$(sanitize "$user")" | head -n1)

    if command -v xclip >/dev/null 2>&1; then
        echo -n "$pass_entry" | xclip -selection clipboard
    elif command -v wl-copy >/dev/null 2>&1; then
        echo -n "$pass_entry" | wl-copy
    else
        send_notify "❌ No clipboard tool (xclip/wl-copy) found!"
        return
    fi

    local user_disp="$user"
    [[ ${#user_disp} -gt 32 ]] && user_disp="${user_disp:0:32}..."
    send_notify "Password for $user_disp@$site copied to clipboard."
    if [[ "$CLOSE_ON_COPY" == "1" ]]; then
        rofi -e "Password copied. Closing." && exit 0
    fi
}

edit_entry() {
    local site="$1" user="$2"
    local entry_path="web/$site/$user"
    local current_pass current_user current_site new_site new_user new_pass confirm
    current_pass=$(pass show "$entry_path" | head -n1)
    current_user=$(pass show "$entry_path" | grep '^username:' | cut -d' ' -f2-)
    current_site=$(pass show "$entry_path" | grep '^url:' | cut -d' ' -f2-)
    while true; do
        new_site=$(echo "$current_site" | rofi -dmenu -p "Site (domain)" -mesg "<b><span size='large' foreground='#00B4D8'>Edit Entry</span></b>
<span size='small' foreground='#FFA500'>Edit the website domain</span>")
        new_site="$(sanitize "$new_site")"
        [[ -z "$new_site" ]] && return 1
        new_user=$(echo "$current_user" | rofi -dmenu -p "Username" -mesg "<b><span size='large' foreground='#00B4D8'>Edit Entry</span></b>
<span size='small' foreground='#FFA500'>Edit the username for $new_site</span>")
        new_user="$(sanitize "$new_user")"
        [[ -z "$new_user" ]] && return 1
        new_pass=$(echo "$current_pass" | rofi -dmenu -p "Password" -password -mesg "<b><span size='large' foreground='#00B4D8'>Edit Entry</span></b>
<span size='small' foreground='#FFA500'>Edit the password for $new_user@$new_site</span>")
        [[ -z "$new_pass" ]] && return 1
        confirm=$(echo -e "Save\nEdit" | rofi -dmenu -p "Save changes?" -mesg "<b>Site:</b> $new_site\n<b>Username:</b> $new_user")
        if [[ "$confirm" == "Save" ]]; then
            break
        fi
    done
    # Remove old entry if site or user changed
    if [[ "$site" != "$new_site" || "$user" != "$new_user" ]]; then
        pass rm -f "web/$site/$user"
    fi
    local insert_output
    insert_output=$(echo -e "$new_pass\nusername: $new_user\nurl: $new_site" | pass insert -m -f "web/$new_site/$new_user" 2>&1)
    if [[ $? -eq 0 ]]; then
        send_notify "✏️ Entry for $new_user@$new_site updated."
        if [[ "$CLOSE_ON_EDIT" == "1" ]]; then
            rofi -e "Edit complete. Closing." && exit 0
        fi
        return 0
    else
        send_notify "❌ Failed to update entry for $new_user@$new_site.\n$insert_output"
        return 1
    fi
}

manual_entry() {
    local site user pass confirm
    while true; do
        site=$(echo | rofi -dmenu -p "Site (domain)" -mesg "<b><span size='large' foreground='#00B4D8'>Add Entry Manually</span></b>
<span size='small' foreground='#FFA500'>Enter the website domain (e.g. github.com)</span>")
        site="$(sanitize "$site")"
        [[ -z "$site" ]] && return
        user=$(echo | rofi -dmenu -p "Username" -mesg "<b><span size='large' foreground='#00B4D8'>Add Entry Manually</span></b>
<span size='small' foreground='#FFA500'>Enter the username for $site</span>")
        user="$(sanitize "$user")"
        [[ -z "$user" ]] && return
        pass=$(echo | rofi -dmenu -p "Password" -password -mesg "<b><span size='large' foreground='#00B4D8'>Add Entry Manually</span></b>
<span size='small' foreground='#FFA500'>Enter the password for $user@$site</span>")
        [[ -z "$pass" ]] && return
        confirm=$(echo -e "Save\nEdit" | rofi -dmenu -p "Save this entry?" -mesg "<b>Site:</b> $site
<b>Username:</b> $user")
        [[ "$confirm" == "Save" ]] && break
    done
    local insert_output
    insert_output=$(echo -e "$pass\nusername: $user\nurl: $site" | pass insert -m -f "web/$site/$user" 2>&1)
    if [[ $? -eq 0 ]]; then
        send_notify "✅ Entry for $user@$site added."
        if [[ "$CLOSE_ON_NEW" == "1" ]]; then
            rofi -e "Entry added. Closing." && exit 0
        fi
    else
        send_notify "❌ Failed to add entry for $user@$site.\n$insert_output"
    fi
}

# === Main Flow ===
while true; do
    MENU=$(main_menu)
    case "$MENU" in
        "$ICON_WEB "*)
            SITE="${MENU#"$ICON_WEB"}"
            SITE="$(echo "$SITE" | xargs)"
            while true; do
                USER=$(user_menu "$SITE")
                if [[ "$USER" == "$ICON_BACK Back" || -z "$USER" ]]; then
                    break
                elif [[ "$USER" == "🗑️ Delete this site" ]]; then
                    confirm=$(echo -e "Yes\nNo" | rofi -dmenu -p "Delete site $SITE and all its entries?" -mesg "<b><span size='medium' foreground='#FF0000'>Delete Site</span></b>")
                    if [[ "$confirm" == "Yes" ]]; then
                        rm -rf ~/.password-store/web/"$SITE"
                        send_notify "🗑️ Site $SITE deleted."
                        if [[ "$CLOSE_ON_DELETE" == "1" ]]; then
                            rofi -e "Site deleted. Closing." && exit 0
                        fi
                        break
                    fi
                    continue
                elif [[ "$USER" == "✏️ Edit Entry" ]]; then
                    users=$(get_users_for_site "$SITE")
                    user_to_edit=$(printf "%s\n" $users | rofi -dmenu -p "Edit which user?" -mesg "<b><span size='large' foreground='#00B4D8'>Edit User</span></b>")
                    [[ -z "$user_to_edit" ]] && continue
                    if edit_entry "$SITE" "$user_to_edit"; then
                        continue  # Refresh user list after edit
                    else
                        continue
                    fi
                elif [[ "$USER" == "__COPIED__" ]]; then
                    continue  # After copy, refresh user menu
                elif [[ "$USER" == "__DELETED__" ]]; then
                    continue  # After delete, refresh user menu
                fi
                # Default: copy password to clipboard
                copy_to_clipboard "$SITE" "$USER"
            done
            ;;
        "➕ Add Entry Manually")
            manual_entry
            continue  # After manual entry, show main menu again
            ;;
        "$ICON_IMPORT Import Passwords from File")
            FILE=$(import_menu)
            FILE="${FILE#$ICON_FILE}"
            FILE="${FILE#$ICON_BACK Back}"
            [[ -z "$FILE" || "$FILE" == "Back" ]] && continue
            FILE="$(echo "$FILE" | xargs)"
            FULL="$IMPORT_FOLDER/$FILE"
            if [[ -f "$FULL" ]]; then
                if /usr/bin/rofi-passx-import "$FULL"; then
                    send_notify "✅ Password import successful!"
                else
                    send_notify "❌ Password import failed!"
                fi
            else
                send_notify "❌ File not found: $FULL"
            fi
            ;;
        "⚙️ Settings")
            open_settings
            source "$CONFIG_FILE"
            ICON_WEB="${ICON_WEB:-$ICON_WEB_DEFAULT}"
            ICON_IMPORT="${ICON_IMPORT:-$ICON_IMPORT_DEFAULT}"
            ICON_FILE="${ICON_FILE:-$ICON_FILE_DEFAULT}"
            ICON_USER="${ICON_USER:-$ICON_USER_DEFAULT}"
            ICON_BACK="${ICON_BACK:-$ICON_BACK_DEFAULT}"
            IMPORT_FOLDER="${IMPORT_FOLDER:-$IMPORT_FOLDER_DEFAULT}"
            ;;
        "Onboard")
            /usr/bin/rofi-passx-onboard || send_notify "Error running rofi-passx-onboard"
            ;;
        "$ICON_BACK Back")
            rofi -show drun & disown
            break
            ;;
        *)
            send_notify "❓ Unknown command: $MENU"
            ;;
    esac
done
