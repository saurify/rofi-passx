#!/usr/bin/env bash
set -euo pipefail

# ============================================================================
#  SECTION 0: UTILITY SOURCING
#  – source utility functions
# ============================================================================

# Determine script directory for sourcing utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source utilities (try both development and installed paths)
if [[ -f "$SCRIPT_DIR/utils/notify.sh" ]]; then
    # Development mode
    source "$SCRIPT_DIR/utils/notify.sh"
    source "$SCRIPT_DIR/utils/config.sh"
    source "$SCRIPT_DIR/utils/pass.sh"
    source "$SCRIPT_DIR/utils/clipboard.sh"
    source "$SCRIPT_DIR/utils/gpg.sh"
    source "$SCRIPT_DIR/utils/startup.sh"
    source "$SCRIPT_DIR/menu/confirm_action_menu.sh"
    source "$SCRIPT_DIR/menu/add_entry_menu.sh"
    source "$SCRIPT_DIR/menu/update_entry_menu.sh"
    source "$SCRIPT_DIR/menu/delete_entry_menu.sh"
    source "$SCRIPT_DIR/menu/edit_passwords_menu.sh"
    source "$SCRIPT_DIR/menu/site_menu.sh"
elif [[ -f "/usr/lib/rofi-passx/utils/notify.sh" ]]; then
    # Installed mode
    source "/usr/lib/rofi-passx/utils/notify.sh"
    source "/usr/lib/rofi-passx/utils/config.sh"
    source "/usr/lib/rofi-passx/utils/pass.sh"
    source "/usr/lib/rofi-passx/utils/clipboard.sh"
    source "/usr/lib/rofi-passx/utils/gpg.sh"
    source "/usr/lib/rofi-passx/utils/startup.sh"
    source "/usr/lib/rofi-passx/menu/confirm_action_menu.sh"
    source "/usr/lib/rofi-passx/menu/add_entry_menu.sh"
    source "/usr/lib/rofi-passx/menu/update_entry_menu.sh"
    source "/usr/lib/rofi-passx/menu/delete_entry_menu.sh"
    source "/usr/lib/rofi-passx/menu/edit_passwords_menu.sh"
    source "/usr/lib/rofi-passx/menu/site_menu.sh"
else
    echo "Error: Could not find utility files" >&2
    exit 1
fi

# ============================================================================
#  SECTION 1: CONFIGURATION
#  – load defaults
#  – source $CONFIG_FILE
#  – apply overrides
# ============================================================================
IMPORT_FOLDER_DEFAULT="$HOME/Downloads"

CLOSE_ON_EDIT_DEFAULT=0
CLOSE_ON_COPY_DEFAULT=0
CLOSE_ON_DELETE_DEFAULT=0
CLOSE_ON_NEW_DEFAULT=0

grep_case_sensitive_DEFAULT=0
ENABLE_ALT_C_DEFAULT=1
ENABLE_ALT_D_DEFAULT=1
ENABLE_ALT_E_DEFAULT=1
ENABLE_GPG_KEY_SETTINGS_DEFAULT=1
HIDE_PASSWORD_DEFAULT=1    # 1 = mask password prompt

# Icon defaults
ICON_WEB_DEFAULT="🌐"
ICON_IMPORT_DEFAULT="📥"
ICON_FILE_DEFAULT="📄"
ICON_USER_DEFAULT="👤"
ICON_BACK_DEFAULT="↩"

CONFIG_FILE="$HOME/.config/rofi-passx/config.sh"

# shellcheck disable=SC1090
[[ -f $CONFIG_FILE ]] && source "$CONFIG_FILE"

# now assign each final var (override default if user set in $CONFIG_FILE)
IMPORT_FOLDER="${IMPORT_FOLDER:-$IMPORT_FOLDER_DEFAULT}"

CLOSE_ON_EDIT="${CLOSE_ON_EDIT:-$CLOSE_ON_EDIT_DEFAULT}"
CLOSE_ON_COPY="${CLOSE_ON_COPY:-$CLOSE_ON_COPY_DEFAULT}"
CLOSE_ON_DELETE="${CLOSE_ON_DELETE:-$CLOSE_ON_DELETE_DEFAULT}"
CLOSE_ON_NEW="${CLOSE_ON_NEW:-$CLOSE_ON_NEW_DEFAULT}"

grep_case_sensitive="${grep_case_sensitive:-$grep_case_sensitive_DEFAULT}"
ENABLE_ALT_C="${ENABLE_ALT_C:-$ENABLE_ALT_C_DEFAULT}"
ENABLE_ALT_D="${ENABLE_ALT_D:-$ENABLE_ALT_D_DEFAULT}"
ENABLE_ALT_E="${ENABLE_ALT_E:-$ENABLE_ALT_E_DEFAULT}"
ENABLE_GPG_KEY_SETTINGS="${ENABLE_GPG_KEY_SETTINGS:-$ENABLE_GPG_KEY_SETTINGS_DEFAULT}"
HIDE_PASSWORD="${HIDE_PASSWORD:-$HIDE_PASSWORD_DEFAULT}"

# Icon assignments
ICON_WEB="${ICON_WEB:-$ICON_WEB_DEFAULT}"
ICON_IMPORT="${ICON_IMPORT:-$ICON_IMPORT_DEFAULT}"
ICON_FILE="${ICON_FILE:-$ICON_FILE_DEFAULT}"
ICON_USER="${ICON_USER:-$ICON_USER_DEFAULT}"
ICON_BACK="${ICON_BACK:-$ICON_BACK_DEFAULT}"

# helper for password prompt flag
if [[ "$HIDE_PASSWORD" -eq 1 ]]; then
    PASS_PROMPT_FLAG=(-password)
else
    PASS_PROMPT_FLAG=()
fi

if [[ -f "$SCRIPT_DIR/menu/user_menu.sh" ]]; then
    source "$SCRIPT_DIR/menu/user_menu.sh"
fi

# ============================================================================
#  SECTION 2: UI  (rofi/dmenu + notifications)
#  – Uses utility functions from utils/notify.sh
# ============================================================================
# Note: All notifications now use utility functions from utils/notify.sh
# Functions available: notify_copy, notify_delete, notify_update, notify_generate,
# notify_init, notify_gpg_create, notify_gpg_import, notify_error

# Legacy wrapper for backward compatibility
send_notify() {
    local msg="$1"; msg="${msg//$'\\n'/$'\n'}"
    if   command -v notify-send >/dev/null; then notify-send "rofi-passx" "$msg"
    elif command -v zenity >/dev/null;    then zenity --info --text="$msg"
    elif command -v kdialog >/dev/null;   then kdialog --msgbox "$msg"
    else  echo "== rofi-passx: $msg ==" >&2
    fi
}

# parameters:
#   $1 = prompt (-p)
#   $2 = mesg (-mesg)
#   $3.. = menu items
rofi_menu() {
    local prompt="$1" mesg="$2"; shift 2
    printf "%s\n" "$@" \
      | rofi -dmenu -markup-rows -mesg "$mesg" -p "$prompt"
}


# ============================================================================
#  SECTION 3: CLIPBOARD HELPERS
#  – Uses utility functions from utils/clipboard.sh
# ============================================================================
# Note: All clipboard operations now use utility functions from utils/clipboard.sh
# Functions available: clipboard_copy, clipboard_clear, clip_copy, clip_paste

# Legacy wrapper for backward compatibility
copy_to_clipboard() {
    local text="$1" label="$2"
    if clip_copy "$text"; then
        send_notify "🔒 $label copied to clipboard."
        return 0
    else
        send_notify "❌ Failed to copy to clipboard!"
        return 1
    fi
}

copy_username_to_clipboard() {
    local site="$1" user="$2" raw username
    raw=$(pass show "web/$site/$user") || return 1
    username=$(
      printf "%b" "$raw" \
        | sed -nEn 's/^[[:space:]]*username:[[:space:]]*//Ip' \
        | head -n1
    )
    if [[ -z "$username" ]]; then
        send_notify "❌ No username for $user@$site."
        return 1
    fi
    copy_to_clipboard "$username" "Username for $user@$site"
}


# ============================================================================
#  SECTION 4: PASS-STORE HELPERS
#  – Uses utility functions from utils/pass.sh
# ============================================================================
# Note: All pass operations now use utility functions from utils/pass.sh
# Functions available: pass_check, pass_init, pass_list, pass_show, pass_insert, 
# pass_generate, pass_rm, pass_edit, pass_create, pass_update, pass_remove

# Legacy wrapper for backward compatibility
sanitize() {
    # allow more URL-safe chars if you like
    echo "$1" | sed 's/[^a-zA-Z0-9_.@-]//g'
}

get_sites() {
    find ~/.password-store/web -type f -name '*.gpg' 2>/dev/null \
      | sed 's|.gpg$||;s|.*/web/||' \
      | cut -d/ -f1 \
      | sort -u \
      | xargs -I{} printf "%s%s\n" {}
}

get_users_for_site() {
    local site=${1// /}
    find ~/.password-store/web/"$site" -type f -name '*.gpg' 2>/dev/null \
      | sed 's|.gpg$||;s|.*/'"$site"'/||' \
      | sort -u
}

is_pass_initialized() {
    pass git status &>/dev/null
}

check_dependencies() {
    local miss=() tool
    for cmd in rofi pass bash; do
      ! command -v "$cmd" &>/dev/null && miss+=("$cmd")
    done
    if ! clip_check &>/dev/null; then
        miss+=("xclip or wl-copy")
    fi
    (( ${#miss[@]} )) && {
      echo "[rofi-passx] Missing: ${miss[*]}" >&2
      exit 1
    }
}

check_dependencies


# ============================================================================
#  SECTION 5: GPG HELPERS
#  – gpg_key_settings_menu()
#  – (onboarding logic skipped for now)
# ============================================================================
gpg_key_settings_menu() {
    # stub: we'll revisit onboarding & key-edit later.
    send_notify "🔑 GPG settings (skipped for this refactor)."
}


# ============================================================================
#  SECTION 6: MENUS & ACTIONS
#  – main_menu
#  – import_menu
#  – user_menu
#  – manual_entry
#  – edit_entry
#  – open_settings_menu
# ============================================================================
main_menu() {
    local sites items sel
    sites=$(get_sites)
    items=()
    while read -r s; do [[ -n "$s" ]] && items+=("$ICON_WEB $s"); done <<<"$sites"
    items+=("➕ Add Entry Manually")
    items+=("$ICON_IMPORT Import Passwords from File")
    [[ "$ENABLE_GPG_KEY_SETTINGS" -eq 1 ]] && items+=("🔑 GPG Key Settings")
    items+=("⚙️ Settings")
    is_pass_initialized || items+=("Onboard")
    items+=("$ICON_BACK Back")

    local mesg="Select a site to view users, or choose an action from the menu."
    rofi_menu "rofi-passx: Select site or action" "$mesg" "${items[@]}"
}

import_menu() {
    local files=("$ICON_BACK Back") f
    for f in "$IMPORT_FOLDER"/*.csv; do [[ -f $f ]] && files+=("$ICON_FILE $(basename "$f")"); done
    local mesg="Select a CSV file to import passwords from Firefox or Chrome."
    rofi_menu "rofi-passx: $ICON_IMPORT Import CSV" "$mesg" "${files[@]}"
}

manual_entry() {
    local domain username password entry
    domain=$(rofi -dmenu -p "Domain (e.g., github.com):" -mesg "Enter the website domain")
    [[ -z "$domain" ]] && return 1
    
    username=$(rofi -dmenu -p "Username:" -mesg "Enter the username")
    [[ -z "$username" ]] && return 1
    
    password=$(rofi -dmenu "${PASS_PROMPT_FLAG[@]}" -p "Password:" -mesg "Enter the password")
    [[ -z "$password" ]] && return 1
    
    entry="web/${domain}/${username}"
    if pass_create "$domain" "$username" "$password"; then
        send_notify "✅ Entry created for $username@$domain"
        [[ "$CLOSE_ON_NEW" -eq 1 ]] && exit 0
    else
        send_notify "❌ Failed to create entry"
    fi
}

edit_entry() {
    local site="$1" users user_sel
    users=$(get_users_for_site "$site")
    user_sel=$(printf "%s\n" "$users" | rofi -dmenu -p "Select user to edit:")
    [[ -z "$user_sel" ]] && return 1
    
    local entry="web/$site/$user_sel"
    if pass_edit "$entry"; then
        send_notify "✅ Entry updated for $user_sel@$site"
        [[ "$CLOSE_ON_EDIT" -eq 1 ]] && exit 0
    else
        send_notify "❌ Failed to update entry"
    fi
}

open_settings_menu() {
    local options=("📝 Edit Config File" "🔄 Reset Config" "↩ Back")
    local choice
    choice=$(printf "%s\n" "${options[@]}" | rofi -dmenu -p "Settings:" -mesg "Choose a settings option")
    
    case "$choice" in
        "📝 Edit Config File")
            config_open
            ;;
        "🔄 Reset Config")
            if confirm "This will reset your config to defaults. Continue?"; then
                config_regenerate
            fi
            ;;
        "↩ Back")
            return 0
            ;;
    esac
}

# ============================================================================
#  SECTION 7: MAIN LOOP
# ============================================================================
while true; do
  sel=$(main_menu)
  case "$sel" in
    "$ICON_WEB "*)
      site=${sel#"$ICON_WEB "}; site=${site// /}
      while true; do
        user_sel=$(site_menu "$site")
        [[ "$user_sel" == "$ICON_BACK Back" || -z $user_sel ]] && break
        case "$user_sel" in
          "➕ Add New User")
            if input_password_create "$site"; then
              send_notify "✅ New user added to $site"
              [[ "$CLOSE_ON_NEW" -eq 1 ]] && exit 0
            else
              send_notify "❌ Failed to add user to $site"
            fi
            ;;
          "✏️ Edit Entry")   edit_entry "$site" ;;
          "🗑️ Delete this site") 
            if confirm "Delete all entries for $site?"; then
              for user in $(get_users_for_site "$site"); do
                pass_remove "$site" "$user"
              done
              send_notify "✅ All entries for $site deleted"
              [[ "$CLOSE_ON_DELETE" -eq 1 ]] && exit 0
            fi
            ;;
          *)                  
            passout="${user_sel#👤 }"
            raw=$(pass show "web/$site/$passout")
            pw=$(printf "%b" "$raw"| head -n1)
            if clipboard_copy "$pw" "Password for $passout@$site"; then
              [[ "$CLOSE_ON_COPY" -eq 1 ]] && exit 0
            fi
            ;;
        esac
      done
      ;;
    "➕ Add Entry Manually") manual_entry ;;
    "$ICON_IMPORT Import Passwords from File")
      f=$(import_menu); f=${f#$ICON_FILE }; [[ $f == Back ]] && continue
      if pass_import_csv "$IMPORT_FOLDER/$f"; then
        send_notify "✅ Import successful!"
      else
        send_notify "❌ Import failed!"
      fi
      ;;
    "🔑 GPG Key Settings")    gpg_key_settings_menu ;;
    "⚙️ Settings")            open_settings_menu; source "$CONFIG_FILE" ;;
    "Onboard")                /usr/bin/rofi-passx-setup ;;
    "$ICON_BACK Back")        rofi -show drun & disown; exit 0 ;;
    *)                        send_notify "❓ Unknown: $sel" ;;
  esac
done
